# ideas 

## design goals.
The next round of design for this is to simplify the api layer and expand upon. This means that the 
application should continue its goals of being serverless and cost effective while expanding on 
tooling surrounding it. This means that we should further decompose what lives where.

# breaking this down, I think the first steps should be to do a new API design phase to think about the calls and structures we'd want for this, as well as the structures that would be supported by the tool.


API
---
- breakout API server to be _only_ a json API
-- add api docs
-- support json submission
-- maintain the "no js" version (i like it)
-- support html to pdf rendering (maybe as its own lambda)
-- tracing and telemetry
- simplify the api
-- what can get cut out?
-- how do we safely let folks name things?
-- maybe we just add more dropdown items?
-- maybe folks can submit a recommendation for a name?

JS
--
- what role can WASM play? maybe we don't even have to make server calls?
- ability to save plans
- add user login
- add ability to render plan and fill it out
- sort out react vs svelte (I'd like to use svelte, maybe?)

mobile
------
litplan barbell calculator
- heaviest plates
- progression speed
- what would it take to make a native swift app? 


OPS
---
- automated deploy on release branch for release
- automated deploy on master for trunk

Features:
- allow more movement types
- allow for supersets?
- add more 5/3/1 plans





- expand the workouts this supports
    - more 5/3/1 routines (research this)
    - better UI templates. Maybe reimagine this?
- create a svelt3 app to consume the api
    - this could have nice features to it for UX
    - experiment with WASM??
    - generate PDF
- swift app? Maybe for barbell calculator
- maybe this has user accounts
    - maybe we hash your email address
    - you get an email to login (verify its you)
    - track progress?
- maybe it could store changes over time?
    - I'd like to explore this a bit more
- maybe make a nicer template for printing
    - maybe native 4 to page?
    - cleaner layout?
    - a11y thinking?
- tracking statistics
	- this could be useful for seeing lifts over time 
	- this could be useful for gettin old plans
	- sharing a plan if you are a trainer. So maybe you share a plan and a logged in user can "clone" the plan
	  and associate that plan to their account.


I think it would be nice to use this to wire up stack tracing (maybe AWS xray or something).
Configure automated deploy patterns for the lambda part too
